//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 14/07/2022 17:41:54
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace GamestartLogicContext
{

    [DatabaseAttribute(Name = "gamestart_logic")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class GamestartLogicDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(GamestartLogicDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertAbbonamento(Abbonamento instance);
        partial void UpdateAbbonamento(Abbonamento instance);
        partial void DeleteAbbonamento(Abbonamento instance);
        partial void InsertAcquistoInNegozio(AcquistoInNegozio instance);
        partial void UpdateAcquistoInNegozio(AcquistoInNegozio instance);
        partial void DeleteAcquistoInNegozio(AcquistoInNegozio instance);
        partial void InsertAcquistoOnline(AcquistoOnline instance);
        partial void UpdateAcquistoOnline(AcquistoOnline instance);
        partial void DeleteAcquistoOnline(AcquistoOnline instance);
        partial void InsertCliente(Cliente instance);
        partial void UpdateCliente(Cliente instance);
        partial void DeleteCliente(Cliente instance);
        partial void InsertCorriere(Corriere instance);
        partial void UpdateCorriere(Corriere instance);
        partial void DeleteCorriere(Corriere instance);
        partial void InsertDettaglivendita(Dettaglivendita instance);
        partial void UpdateDettaglivendita(Dettaglivendita instance);
        partial void DeleteDettaglivendita(Dettaglivendita instance);
        partial void InsertDipendente(Dipendente instance);
        partial void UpdateDipendente(Dipendente instance);
        partial void DeleteDipendente(Dipendente instance);
        partial void InsertFiliale(Filiale instance);
        partial void UpdateFiliale(Filiale instance);
        partial void DeleteFiliale(Filiale instance);
        partial void InsertGestore(Gestore instance);
        partial void UpdateGestore(Gestore instance);
        partial void DeleteGestore(Gestore instance);
        partial void InsertOfferta(Offerta instance);
        partial void UpdateOfferta(Offerta instance);
        partial void DeleteOfferta(Offerta instance);
        partial void InsertPreordine(Preordine instance);
        partial void UpdatePreordine(Preordine instance);
        partial void DeletePreordine(Preordine instance);
        partial void InsertProdotto(Prodotto instance);
        partial void UpdateProdotto(Prodotto instance);
        partial void DeleteProdotto(Prodotto instance);
        partial void InsertPromozione(Promozione instance);
        partial void UpdatePromozione(Promozione instance);
        partial void DeletePromozione(Promozione instance);
        partial void InsertSpedizione(Spedizione instance);
        partial void UpdateSpedizione(Spedizione instance);
        partial void DeleteSpedizione(Spedizione instance);
        partial void InsertTorneo(Torneo instance);
        partial void UpdateTorneo(Torneo instance);
        partial void DeleteTorneo(Torneo instance);

        #endregion

        public GamestartLogicDataContext() :
        base(GetConnectionString("GamestartLogicDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public GamestartLogicDataContext(MappingSource mappingSource) :
        base(GetConnectionString("GamestartLogicDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public GamestartLogicDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public GamestartLogicDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public GamestartLogicDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public GamestartLogicDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Abbonamento> Abbonamentos
        {
            get
            {
                return this.GetTable<Abbonamento>();
            }
        }

        public Devart.Data.Linq.Table<AcquistoInNegozio> AcquistoInNegozios
        {
            get
            {
                return this.GetTable<AcquistoInNegozio>();
            }
        }

        public Devart.Data.Linq.Table<AcquistoOnline> AcquistoOnlines
        {
            get
            {
                return this.GetTable<AcquistoOnline>();
            }
        }

        public Devart.Data.Linq.Table<Cliente> Clientes
        {
            get
            {
                return this.GetTable<Cliente>();
            }
        }

        public Devart.Data.Linq.Table<Corriere> Corrieres
        {
            get
            {
                return this.GetTable<Corriere>();
            }
        }

        public Devart.Data.Linq.Table<Dettaglivendita> Dettaglivenditas
        {
            get
            {
                return this.GetTable<Dettaglivendita>();
            }
        }

        public Devart.Data.Linq.Table<Dipendente> Dipendentes
        {
            get
            {
                return this.GetTable<Dipendente>();
            }
        }

        public Devart.Data.Linq.Table<Filiale> Filiales
        {
            get
            {
                return this.GetTable<Filiale>();
            }
        }

        public Devart.Data.Linq.Table<Gestore> Gestores
        {
            get
            {
                return this.GetTable<Gestore>();
            }
        }

        public Devart.Data.Linq.Table<Offerta> Offertas
        {
            get
            {
                return this.GetTable<Offerta>();
            }
        }

        public Devart.Data.Linq.Table<Preordine> Preordines
        {
            get
            {
                return this.GetTable<Preordine>();
            }
        }

        public Devart.Data.Linq.Table<Prodotto> Prodottos
        {
            get
            {
                return this.GetTable<Prodotto>();
            }
        }

        public Devart.Data.Linq.Table<Promozione> Promoziones
        {
            get
            {
                return this.GetTable<Promozione>();
            }
        }

        public Devart.Data.Linq.Table<Spedizione> Spediziones
        {
            get
            {
                return this.GetTable<Spedizione>();
            }
        }

        public Devart.Data.Linq.Table<Torneo> Torneos
        {
            get
            {
                return this.GetTable<Torneo>();
            }
        }
    }
}

namespace GamestartLogicContext
{

    /// <summary>
    /// There are no comments for GamestartLogicContext.Abbonamento in the schema.
    /// </summary>
    [Table(Name = @"gamestart_logic.abbonamento")]
    public partial class Abbonamento : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _IdAbbonamento;

        private System.DateTime _DataInizio;

        private System.DateTime _ValiditÃ;

        private string _CodFiscale;
        #pragma warning restore 0649

        private EntityRef<Cliente> _Cliente;

        private EntitySet<Offerta> _Offerta;

        private EntitySet<Torneo> _Torneo;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdAbbonamentoChanging(long value);
        partial void OnIdAbbonamentoChanged();
        partial void OnDataInizioChanging(System.DateTime value);
        partial void OnDataInizioChanged();
        partial void OnValiditÃChanging(System.DateTime value);
        partial void OnValiditÃChanged();
        partial void OnCodFiscaleChanging(string value);
        partial void OnCodFiscaleChanged();
        #endregion

        public Abbonamento()
        {
            this._Cliente  = default(EntityRef<Cliente>);
            this._Offerta = new EntitySet<Offerta>(new Action<Offerta>(this.attach_Offerta), new Action<Offerta>(this.detach_Offerta));
            this._Torneo = new EntitySet<Torneo>(new Action<Torneo>(this.attach_Torneo), new Action<Torneo>(this.detach_Torneo));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdAbbonamento in the schema.
        /// </summary>
        [Column(Storage = "_IdAbbonamento", CanBeNull = false, DbType = "BIGINT NOT NULL", IsPrimaryKey = true)]
        public long IdAbbonamento
        {
            get
            {
                return this._IdAbbonamento;
            }
            set
            {
                if (this._IdAbbonamento != value)
                {
                    this.OnIdAbbonamentoChanging(value);
                    this.SendPropertyChanging("IdAbbonamento");
                    this._IdAbbonamento = value;
                    this.SendPropertyChanged("IdAbbonamento");
                    this.OnIdAbbonamentoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DataInizio in the schema.
        /// </summary>
        [Column(Storage = "_DataInizio", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DataInizio
        {
            get
            {
                return this._DataInizio;
            }
            set
            {
                if (this._DataInizio != value)
                {
                    this.OnDataInizioChanging(value);
                    this.SendPropertyChanging("DataInizio");
                    this._DataInizio = value;
                    this.SendPropertyChanged("DataInizio");
                    this.OnDataInizioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ValiditÃ in the schema.
        /// </summary>
        [Column(Name = @"`ValiditÃ `", Storage = "_ValiditÃ", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime ValiditÃ
        {
            get
            {
                return this._ValiditÃ;
            }
            set
            {
                if (this._ValiditÃ != value)
                {
                    this.OnValiditÃChanging(value);
                    this.SendPropertyChanging("ValiditÃ");
                    this._ValiditÃ = value;
                    this.SendPropertyChanged("ValiditÃ");
                    this.OnValiditÃChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CodFiscale in the schema.
        /// </summary>
        [Column(Storage = "_CodFiscale", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CodFiscale
        {
            get
            {
                return this._CodFiscale;
            }
            set
            {
                if (this._CodFiscale != value)
                {
                    if (this._Cliente.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCodFiscaleChanging(value);
                    this.SendPropertyChanging("CodFiscale");
                    this._CodFiscale = value;
                    this.SendPropertyChanged("CodFiscale");
                    this.OnCodFiscaleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cliente in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Cliente_Abbonamento", Storage="_Cliente", ThisKey="CodFiscale", OtherKey="CodFiscale", IsForeignKey=true)]
        public Cliente Cliente
        {
            get
            {
                return this._Cliente.Entity;
            }
            set
            {
                Cliente previousValue = this._Cliente.Entity;
                if ((previousValue != value) || (this._Cliente.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Cliente");
                    if (previousValue != null)
                    {
                        this._Cliente.Entity = null;
                        previousValue.Abbonamento.Remove(this);
                    }
                    this._Cliente.Entity = value;
                    if (value != null)
                    {
                        this._CodFiscale = value.CodFiscale;
                        value.Abbonamento.Add(this);
                    }
                    else
                    {
                        this._CodFiscale = default(string);
                    }
                    this.SendPropertyChanged("Cliente");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Offerta in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Abbonamento_Offerta", Storage="_Offerta", ThisKey="IdAbbonamento", OtherKey="IdAbbonamento", DeleteRule="NO ACTION")]
        public EntitySet<Offerta> Offerta
        {
            get
            {
                return this._Offerta;
            }
            set
            {
                this._Offerta.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Torneo in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Abbonamento_Torneo", Storage="_Torneo", ThisKey="IdAbbonamento", OtherKey="IdFiliale,DataTorneo", LinkTableName=@"gamestart_logic.accesso", LinkThisKey=@"IdAbbonamento", LinkOtherKey=@"IdFiliale,DataTorneo")]
        public EntitySet<Torneo> Torneo
        {
            get
            {
                return this._Torneo;
            }
            set
            {
                this._Torneo.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Offerta(Offerta entity)
        {
            this.SendPropertyChanging("Offerta");
            entity.Abbonamento = this;
        }
    
        private void detach_Offerta(Offerta entity)
        {
            this.SendPropertyChanging("Offerta");
            entity.Abbonamento = null;
        }

        private void attach_Torneo(Torneo entity)
        {
            this.SendPropertyChanging("Torneo");
            entity.Abbonamento.Add(this);
        }
    
        private void detach_Torneo(Torneo entity)
        {
            this.SendPropertyChanging("Torneo");
            entity.Abbonamento.Remove(this);
        }
    }

    /// <summary>
    /// There are no comments for GamestartLogicContext.AcquistoInNegozio in the schema.
    /// </summary>
    [Table(Name = @"gamestart_logic.acquisto_in_negozio")]
    public partial class AcquistoInNegozio : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _IdVendita;

        private System.DateTime _DataVendita;

        private long? _IdPromozione;

        private string _CodFiscaleDipendente;

        private string _CodFiscaleCliente;
        #pragma warning restore 0649

        private EntityRef<Promozione> _Promozione;

        private EntityRef<Dipendente> _Dipendente;

        private EntityRef<Cliente> _Cliente;

        private EntitySet<Dettaglivendita> _Dettaglivendita;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdVenditaChanging(long value);
        partial void OnIdVenditaChanged();
        partial void OnDataVenditaChanging(System.DateTime value);
        partial void OnDataVenditaChanged();
        partial void OnIdPromozioneChanging(long? value);
        partial void OnIdPromozioneChanged();
        partial void OnCodFiscaleDipendenteChanging(string value);
        partial void OnCodFiscaleDipendenteChanged();
        partial void OnCodFiscaleClienteChanging(string value);
        partial void OnCodFiscaleClienteChanged();
        #endregion

        public AcquistoInNegozio()
        {
            this._Promozione  = default(EntityRef<Promozione>);
            this._Dipendente  = default(EntityRef<Dipendente>);
            this._Cliente  = default(EntityRef<Cliente>);
            this._Dettaglivendita = new EntitySet<Dettaglivendita>(new Action<Dettaglivendita>(this.attach_Dettaglivendita), new Action<Dettaglivendita>(this.detach_Dettaglivendita));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdVendita in the schema.
        /// </summary>
        [Column(Storage = "_IdVendita", CanBeNull = false, DbType = "BIGINT NOT NULL", IsPrimaryKey = true)]
        public long IdVendita
        {
            get
            {
                return this._IdVendita;
            }
            set
            {
                if (this._IdVendita != value)
                {
                    this.OnIdVenditaChanging(value);
                    this.SendPropertyChanging("IdVendita");
                    this._IdVendita = value;
                    this.SendPropertyChanged("IdVendita");
                    this.OnIdVenditaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DataVendita in the schema.
        /// </summary>
        [Column(Storage = "_DataVendita", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DataVendita
        {
            get
            {
                return this._DataVendita;
            }
            set
            {
                if (this._DataVendita != value)
                {
                    this.OnDataVenditaChanging(value);
                    this.SendPropertyChanging("DataVendita");
                    this._DataVendita = value;
                    this.SendPropertyChanged("DataVendita");
                    this.OnDataVenditaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdPromozione in the schema.
        /// </summary>
        [Column(Storage = "_IdPromozione", DbType = "BIGINT NULL", UpdateCheck = UpdateCheck.Never)]
        public long? IdPromozione
        {
            get
            {
                return this._IdPromozione;
            }
            set
            {
                if (this._IdPromozione != value)
                {
                    if (this._Promozione.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdPromozioneChanging(value);
                    this.SendPropertyChanging("IdPromozione");
                    this._IdPromozione = value;
                    this.SendPropertyChanged("IdPromozione");
                    this.OnIdPromozioneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CodFiscaleDipendente in the schema.
        /// </summary>
        [Column(Storage = "_CodFiscaleDipendente", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CodFiscaleDipendente
        {
            get
            {
                return this._CodFiscaleDipendente;
            }
            set
            {
                if (this._CodFiscaleDipendente != value)
                {
                    if (this._Dipendente.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCodFiscaleDipendenteChanging(value);
                    this.SendPropertyChanging("CodFiscaleDipendente");
                    this._CodFiscaleDipendente = value;
                    this.SendPropertyChanged("CodFiscaleDipendente");
                    this.OnCodFiscaleDipendenteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CodFiscaleCliente in the schema.
        /// </summary>
        [Column(Storage = "_CodFiscaleCliente", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CodFiscaleCliente
        {
            get
            {
                return this._CodFiscaleCliente;
            }
            set
            {
                if (this._CodFiscaleCliente != value)
                {
                    if (this._Cliente.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCodFiscaleClienteChanging(value);
                    this.SendPropertyChanging("CodFiscaleCliente");
                    this._CodFiscaleCliente = value;
                    this.SendPropertyChanged("CodFiscaleCliente");
                    this.OnCodFiscaleClienteChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Promozione in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Promozione_AcquistoInNegozio", Storage="_Promozione", ThisKey="IdPromozione", OtherKey="IdPromozione", IsForeignKey=true)]
        public Promozione Promozione
        {
            get
            {
                return this._Promozione.Entity;
            }
            set
            {
                Promozione previousValue = this._Promozione.Entity;
                if ((previousValue != value) || (this._Promozione.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Promozione");
                    if (previousValue != null)
                    {
                        this._Promozione.Entity = null;
                        previousValue.AcquistoInNegozio.Remove(this);
                    }
                    this._Promozione.Entity = value;
                    if (value != null)
                    {
                        this._IdPromozione = value.IdPromozione;
                        value.AcquistoInNegozio.Add(this);
                    }
                    else
                    {
                        this._IdPromozione = default(long?);
                    }
                    this.SendPropertyChanged("Promozione");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dipendente in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Dipendente_AcquistoInNegozio", Storage="_Dipendente", ThisKey="CodFiscaleDipendente", OtherKey="CodFiscale", IsForeignKey=true)]
        public Dipendente Dipendente
        {
            get
            {
                return this._Dipendente.Entity;
            }
            set
            {
                Dipendente previousValue = this._Dipendente.Entity;
                if ((previousValue != value) || (this._Dipendente.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Dipendente");
                    if (previousValue != null)
                    {
                        this._Dipendente.Entity = null;
                        previousValue.AcquistoInNegozio.Remove(this);
                    }
                    this._Dipendente.Entity = value;
                    if (value != null)
                    {
                        this._CodFiscaleDipendente = value.CodFiscale;
                        value.AcquistoInNegozio.Add(this);
                    }
                    else
                    {
                        this._CodFiscaleDipendente = default(string);
                    }
                    this.SendPropertyChanged("Dipendente");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cliente in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Cliente_AcquistoInNegozio", Storage="_Cliente", ThisKey="CodFiscaleCliente", OtherKey="CodFiscale", IsForeignKey=true)]
        public Cliente Cliente
        {
            get
            {
                return this._Cliente.Entity;
            }
            set
            {
                Cliente previousValue = this._Cliente.Entity;
                if ((previousValue != value) || (this._Cliente.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Cliente");
                    if (previousValue != null)
                    {
                        this._Cliente.Entity = null;
                        previousValue.AcquistoInNegozio.Remove(this);
                    }
                    this._Cliente.Entity = value;
                    if (value != null)
                    {
                        this._CodFiscaleCliente = value.CodFiscale;
                        value.AcquistoInNegozio.Add(this);
                    }
                    else
                    {
                        this._CodFiscaleCliente = default(string);
                    }
                    this.SendPropertyChanged("Cliente");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dettaglivendita in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="AcquistoInNegozio_Dettaglivendita", Storage="_Dettaglivendita", ThisKey="IdVendita", OtherKey="IdVenditaNegozio", DeleteRule="NO ACTION")]
        public EntitySet<Dettaglivendita> Dettaglivendita
        {
            get
            {
                return this._Dettaglivendita;
            }
            set
            {
                this._Dettaglivendita.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Dettaglivendita(Dettaglivendita entity)
        {
            this.SendPropertyChanging("Dettaglivendita");
            entity.AcquistoInNegozio = this;
        }
    
        private void detach_Dettaglivendita(Dettaglivendita entity)
        {
            this.SendPropertyChanging("Dettaglivendita");
            entity.AcquistoInNegozio = null;
        }
    }

    /// <summary>
    /// There are no comments for GamestartLogicContext.AcquistoOnline in the schema.
    /// </summary>
    [Table(Name = @"gamestart_logic.acquisto_online")]
    public partial class AcquistoOnline : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _IdVendita;

        private System.DateTime _DataVendita;

        private long? _IdPromozione;

        private string _CodFiscale;
        #pragma warning restore 0649

        private EntityRef<Promozione> _Promozione;

        private EntityRef<Cliente> _Cliente;

        private EntitySet<Dettaglivendita> _Dettaglivendita;

        private EntitySet<Spedizione> _Spedizione;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdVenditaChanging(long value);
        partial void OnIdVenditaChanged();
        partial void OnDataVenditaChanging(System.DateTime value);
        partial void OnDataVenditaChanged();
        partial void OnIdPromozioneChanging(long? value);
        partial void OnIdPromozioneChanged();
        partial void OnCodFiscaleChanging(string value);
        partial void OnCodFiscaleChanged();
        #endregion

        public AcquistoOnline()
        {
            this._Promozione  = default(EntityRef<Promozione>);
            this._Cliente  = default(EntityRef<Cliente>);
            this._Dettaglivendita = new EntitySet<Dettaglivendita>(new Action<Dettaglivendita>(this.attach_Dettaglivendita), new Action<Dettaglivendita>(this.detach_Dettaglivendita));
            this._Spedizione = new EntitySet<Spedizione>(new Action<Spedizione>(this.attach_Spedizione), new Action<Spedizione>(this.detach_Spedizione));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdVendita in the schema.
        /// </summary>
        [Column(Storage = "_IdVendita", CanBeNull = false, DbType = "BIGINT NOT NULL", IsPrimaryKey = true)]
        public long IdVendita
        {
            get
            {
                return this._IdVendita;
            }
            set
            {
                if (this._IdVendita != value)
                {
                    this.OnIdVenditaChanging(value);
                    this.SendPropertyChanging("IdVendita");
                    this._IdVendita = value;
                    this.SendPropertyChanged("IdVendita");
                    this.OnIdVenditaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DataVendita in the schema.
        /// </summary>
        [Column(Storage = "_DataVendita", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DataVendita
        {
            get
            {
                return this._DataVendita;
            }
            set
            {
                if (this._DataVendita != value)
                {
                    this.OnDataVenditaChanging(value);
                    this.SendPropertyChanging("DataVendita");
                    this._DataVendita = value;
                    this.SendPropertyChanged("DataVendita");
                    this.OnDataVenditaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdPromozione in the schema.
        /// </summary>
        [Column(Storage = "_IdPromozione", DbType = "BIGINT NULL", UpdateCheck = UpdateCheck.Never)]
        public long? IdPromozione
        {
            get
            {
                return this._IdPromozione;
            }
            set
            {
                if (this._IdPromozione != value)
                {
                    if (this._Promozione.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdPromozioneChanging(value);
                    this.SendPropertyChanging("IdPromozione");
                    this._IdPromozione = value;
                    this.SendPropertyChanged("IdPromozione");
                    this.OnIdPromozioneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CodFiscale in the schema.
        /// </summary>
        [Column(Storage = "_CodFiscale", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CodFiscale
        {
            get
            {
                return this._CodFiscale;
            }
            set
            {
                if (this._CodFiscale != value)
                {
                    if (this._Cliente.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCodFiscaleChanging(value);
                    this.SendPropertyChanging("CodFiscale");
                    this._CodFiscale = value;
                    this.SendPropertyChanged("CodFiscale");
                    this.OnCodFiscaleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Promozione in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Promozione_AcquistoOnline", Storage="_Promozione", ThisKey="IdPromozione", OtherKey="IdPromozione", IsForeignKey=true)]
        public Promozione Promozione
        {
            get
            {
                return this._Promozione.Entity;
            }
            set
            {
                Promozione previousValue = this._Promozione.Entity;
                if ((previousValue != value) || (this._Promozione.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Promozione");
                    if (previousValue != null)
                    {
                        this._Promozione.Entity = null;
                        previousValue.AcquistoOnline.Remove(this);
                    }
                    this._Promozione.Entity = value;
                    if (value != null)
                    {
                        this._IdPromozione = value.IdPromozione;
                        value.AcquistoOnline.Add(this);
                    }
                    else
                    {
                        this._IdPromozione = default(long?);
                    }
                    this.SendPropertyChanged("Promozione");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cliente in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Cliente_AcquistoOnline", Storage="_Cliente", ThisKey="CodFiscale", OtherKey="CodFiscale", IsForeignKey=true)]
        public Cliente Cliente
        {
            get
            {
                return this._Cliente.Entity;
            }
            set
            {
                Cliente previousValue = this._Cliente.Entity;
                if ((previousValue != value) || (this._Cliente.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Cliente");
                    if (previousValue != null)
                    {
                        this._Cliente.Entity = null;
                        previousValue.AcquistoOnline.Remove(this);
                    }
                    this._Cliente.Entity = value;
                    if (value != null)
                    {
                        this._CodFiscale = value.CodFiscale;
                        value.AcquistoOnline.Add(this);
                    }
                    else
                    {
                        this._CodFiscale = default(string);
                    }
                    this.SendPropertyChanged("Cliente");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dettaglivendita in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="AcquistoOnline_Dettaglivendita", Storage="_Dettaglivendita", ThisKey="IdVendita", OtherKey="IdVenditaOnline", DeleteRule="NO ACTION")]
        public EntitySet<Dettaglivendita> Dettaglivendita
        {
            get
            {
                return this._Dettaglivendita;
            }
            set
            {
                this._Dettaglivendita.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Spedizione in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="AcquistoOnline_Spedizione", Storage="_Spedizione", ThisKey="IdVendita", OtherKey="IdVendita", DeleteRule="NO ACTION")]
        public EntitySet<Spedizione> Spedizione
        {
            get
            {
                return this._Spedizione;
            }
            set
            {
                this._Spedizione.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Dettaglivendita(Dettaglivendita entity)
        {
            this.SendPropertyChanging("Dettaglivendita");
            entity.AcquistoOnline = this;
        }
    
        private void detach_Dettaglivendita(Dettaglivendita entity)
        {
            this.SendPropertyChanging("Dettaglivendita");
            entity.AcquistoOnline = null;
        }

        private void attach_Spedizione(Spedizione entity)
        {
            this.SendPropertyChanging("Spedizione");
            entity.AcquistoOnline = this;
        }
    
        private void detach_Spedizione(Spedizione entity)
        {
            this.SendPropertyChanging("Spedizione");
            entity.AcquistoOnline = null;
        }
    }

    /// <summary>
    /// There are no comments for GamestartLogicContext.Cliente in the schema.
    /// </summary>
    [Table(Name = @"gamestart_logic.cliente")]
    public partial class Cliente : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Nome;

        private string _Cognome;

        private System.DateTime? _DataNascita;

        private string _CodFiscale;

        private string _CittÃ;

        private string _Via;

        private string _NCivico;
        #pragma warning restore 0649

        private EntitySet<Abbonamento> _Abbonamento;

        private EntitySet<AcquistoInNegozio> _AcquistoInNegozio;

        private EntitySet<AcquistoOnline> _AcquistoOnline;

        private EntitySet<Preordine> _Preordine;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnNomeChanging(string value);
        partial void OnNomeChanged();
        partial void OnCognomeChanging(string value);
        partial void OnCognomeChanged();
        partial void OnDataNascitaChanging(System.DateTime? value);
        partial void OnDataNascitaChanged();
        partial void OnCodFiscaleChanging(string value);
        partial void OnCodFiscaleChanged();
        partial void OnCittÃChanging(string value);
        partial void OnCittÃChanged();
        partial void OnViaChanging(string value);
        partial void OnViaChanged();
        partial void OnNCivicoChanging(string value);
        partial void OnNCivicoChanged();
        #endregion

        public Cliente()
        {
            this._Abbonamento = new EntitySet<Abbonamento>(new Action<Abbonamento>(this.attach_Abbonamento), new Action<Abbonamento>(this.detach_Abbonamento));
            this._AcquistoInNegozio = new EntitySet<AcquistoInNegozio>(new Action<AcquistoInNegozio>(this.attach_AcquistoInNegozio), new Action<AcquistoInNegozio>(this.detach_AcquistoInNegozio));
            this._AcquistoOnline = new EntitySet<AcquistoOnline>(new Action<AcquistoOnline>(this.attach_AcquistoOnline), new Action<AcquistoOnline>(this.detach_AcquistoOnline));
            this._Preordine = new EntitySet<Preordine>(new Action<Preordine>(this.attach_Preordine), new Action<Preordine>(this.detach_Preordine));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Nome in the schema.
        /// </summary>
        [Column(Storage = "_Nome", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Nome
        {
            get
            {
                return this._Nome;
            }
            set
            {
                if (this._Nome != value)
                {
                    this.OnNomeChanging(value);
                    this.SendPropertyChanging("Nome");
                    this._Nome = value;
                    this.SendPropertyChanged("Nome");
                    this.OnNomeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cognome in the schema.
        /// </summary>
        [Column(Storage = "_Cognome", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Cognome
        {
            get
            {
                return this._Cognome;
            }
            set
            {
                if (this._Cognome != value)
                {
                    this.OnCognomeChanging(value);
                    this.SendPropertyChanging("Cognome");
                    this._Cognome = value;
                    this.SendPropertyChanged("Cognome");
                    this.OnCognomeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DataNascita in the schema.
        /// </summary>
        [Column(Storage = "_DataNascita", DbType = "DATE NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? DataNascita
        {
            get
            {
                return this._DataNascita;
            }
            set
            {
                if (this._DataNascita != value)
                {
                    this.OnDataNascitaChanging(value);
                    this.SendPropertyChanging("DataNascita");
                    this._DataNascita = value;
                    this.SendPropertyChanged("DataNascita");
                    this.OnDataNascitaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CodFiscale in the schema.
        /// </summary>
        [Column(Storage = "_CodFiscale", CanBeNull = false, DbType = "CHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string CodFiscale
        {
            get
            {
                return this._CodFiscale;
            }
            set
            {
                if (this._CodFiscale != value)
                {
                    this.OnCodFiscaleChanging(value);
                    this.SendPropertyChanging("CodFiscale");
                    this._CodFiscale = value;
                    this.SendPropertyChanged("CodFiscale");
                    this.OnCodFiscaleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CittÃ in the schema.
        /// </summary>
        [Column(Name = @"`CittÃ `", Storage = "_CittÃ", DbType = "CHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string CittÃ
        {
            get
            {
                return this._CittÃ;
            }
            set
            {
                if (this._CittÃ != value)
                {
                    this.OnCittÃChanging(value);
                    this.SendPropertyChanging("CittÃ");
                    this._CittÃ = value;
                    this.SendPropertyChanged("CittÃ");
                    this.OnCittÃChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Via in the schema.
        /// </summary>
        [Column(Storage = "_Via", DbType = "CHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Via
        {
            get
            {
                return this._Via;
            }
            set
            {
                if (this._Via != value)
                {
                    this.OnViaChanging(value);
                    this.SendPropertyChanging("Via");
                    this._Via = value;
                    this.SendPropertyChanged("Via");
                    this.OnViaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NCivico in the schema.
        /// </summary>
        [Column(Name = @"nCivico", Storage = "_NCivico", DbType = "CHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string NCivico
        {
            get
            {
                return this._NCivico;
            }
            set
            {
                if (this._NCivico != value)
                {
                    this.OnNCivicoChanging(value);
                    this.SendPropertyChanging("NCivico");
                    this._NCivico = value;
                    this.SendPropertyChanged("NCivico");
                    this.OnNCivicoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Abbonamento in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Cliente_Abbonamento", Storage="_Abbonamento", ThisKey="CodFiscale", OtherKey="CodFiscale", DeleteRule="NO ACTION")]
        public EntitySet<Abbonamento> Abbonamento
        {
            get
            {
                return this._Abbonamento;
            }
            set
            {
                this._Abbonamento.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for AcquistoInNegozio in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Cliente_AcquistoInNegozio", Storage="_AcquistoInNegozio", ThisKey="CodFiscale", OtherKey="CodFiscaleCliente", DeleteRule="NO ACTION")]
        public EntitySet<AcquistoInNegozio> AcquistoInNegozio
        {
            get
            {
                return this._AcquistoInNegozio;
            }
            set
            {
                this._AcquistoInNegozio.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for AcquistoOnline in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Cliente_AcquistoOnline", Storage="_AcquistoOnline", ThisKey="CodFiscale", OtherKey="CodFiscale", DeleteRule="NO ACTION")]
        public EntitySet<AcquistoOnline> AcquistoOnline
        {
            get
            {
                return this._AcquistoOnline;
            }
            set
            {
                this._AcquistoOnline.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Preordine in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Cliente_Preordine", Storage="_Preordine", ThisKey="CodFiscale", OtherKey="CodFiscale", DeleteRule="NO ACTION")]
        public EntitySet<Preordine> Preordine
        {
            get
            {
                return this._Preordine;
            }
            set
            {
                this._Preordine.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Abbonamento(Abbonamento entity)
        {
            this.SendPropertyChanging("Abbonamento");
            entity.Cliente = this;
        }
    
        private void detach_Abbonamento(Abbonamento entity)
        {
            this.SendPropertyChanging("Abbonamento");
            entity.Cliente = null;
        }

        private void attach_AcquistoInNegozio(AcquistoInNegozio entity)
        {
            this.SendPropertyChanging("AcquistoInNegozio");
            entity.Cliente = this;
        }
    
        private void detach_AcquistoInNegozio(AcquistoInNegozio entity)
        {
            this.SendPropertyChanging("AcquistoInNegozio");
            entity.Cliente = null;
        }

        private void attach_AcquistoOnline(AcquistoOnline entity)
        {
            this.SendPropertyChanging("AcquistoOnline");
            entity.Cliente = this;
        }
    
        private void detach_AcquistoOnline(AcquistoOnline entity)
        {
            this.SendPropertyChanging("AcquistoOnline");
            entity.Cliente = null;
        }

        private void attach_Preordine(Preordine entity)
        {
            this.SendPropertyChanging("Preordine");
            entity.Cliente = this;
        }
    
        private void detach_Preordine(Preordine entity)
        {
            this.SendPropertyChanging("Preordine");
            entity.Cliente = null;
        }
    }

    /// <summary>
    /// There are no comments for GamestartLogicContext.Corriere in the schema.
    /// </summary>
    [Table(Name = @"gamestart_logic.corriere")]
    public partial class Corriere : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _IdCorriere;

        private string _Agenzia;
        #pragma warning restore 0649

        private EntitySet<Spedizione> _Spedizione;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdCorriereChanging(long value);
        partial void OnIdCorriereChanged();
        partial void OnAgenziaChanging(string value);
        partial void OnAgenziaChanged();
        #endregion

        public Corriere()
        {
            this._Spedizione = new EntitySet<Spedizione>(new Action<Spedizione>(this.attach_Spedizione), new Action<Spedizione>(this.detach_Spedizione));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdCorriere in the schema.
        /// </summary>
        [Column(Storage = "_IdCorriere", CanBeNull = false, DbType = "BIGINT NOT NULL", IsPrimaryKey = true)]
        public long IdCorriere
        {
            get
            {
                return this._IdCorriere;
            }
            set
            {
                if (this._IdCorriere != value)
                {
                    this.OnIdCorriereChanging(value);
                    this.SendPropertyChanging("IdCorriere");
                    this._IdCorriere = value;
                    this.SendPropertyChanged("IdCorriere");
                    this.OnIdCorriereChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Agenzia in the schema.
        /// </summary>
        [Column(Storage = "_Agenzia", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Agenzia
        {
            get
            {
                return this._Agenzia;
            }
            set
            {
                if (this._Agenzia != value)
                {
                    this.OnAgenziaChanging(value);
                    this.SendPropertyChanging("Agenzia");
                    this._Agenzia = value;
                    this.SendPropertyChanged("Agenzia");
                    this.OnAgenziaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Spedizione in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Corriere_Spedizione", Storage="_Spedizione", ThisKey="IdCorriere", OtherKey="IdCorriere", DeleteRule="NO ACTION")]
        public EntitySet<Spedizione> Spedizione
        {
            get
            {
                return this._Spedizione;
            }
            set
            {
                this._Spedizione.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Spedizione(Spedizione entity)
        {
            this.SendPropertyChanging("Spedizione");
            entity.Corriere = this;
        }
    
        private void detach_Spedizione(Spedizione entity)
        {
            this.SendPropertyChanging("Spedizione");
            entity.Corriere = null;
        }
    }

    /// <summary>
    /// There are no comments for GamestartLogicContext.Dettaglivendita in the schema.
    /// </summary>
    [Table(Name = @"gamestart_logic.dettaglivendita")]
    public partial class Dettaglivendita : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _IdProdotto;

        private long _NProdotti;

        private long? _IdVenditaNegozio;

        private long? _IdVenditaOnline;

        private long _IdDettagli;
        #pragma warning restore 0649

        private EntityRef<AcquistoOnline> _AcquistoOnline;

        private EntityRef<Prodotto> _Prodotto;

        private EntityRef<AcquistoInNegozio> _AcquistoInNegozio;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdProdottoChanging(long value);
        partial void OnIdProdottoChanged();
        partial void OnNProdottiChanging(long value);
        partial void OnNProdottiChanged();
        partial void OnIdVenditaNegozioChanging(long? value);
        partial void OnIdVenditaNegozioChanged();
        partial void OnIdVenditaOnlineChanging(long? value);
        partial void OnIdVenditaOnlineChanged();
        partial void OnIdDettagliChanging(long value);
        partial void OnIdDettagliChanged();
        #endregion

        public Dettaglivendita()
        {
            this._AcquistoOnline  = default(EntityRef<AcquistoOnline>);
            this._Prodotto  = default(EntityRef<Prodotto>);
            this._AcquistoInNegozio  = default(EntityRef<AcquistoInNegozio>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdProdotto in the schema.
        /// </summary>
        [Column(Storage = "_IdProdotto", CanBeNull = false, DbType = "BIGINT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long IdProdotto
        {
            get
            {
                return this._IdProdotto;
            }
            set
            {
                if (this._IdProdotto != value)
                {
                    if (this._Prodotto.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdProdottoChanging(value);
                    this.SendPropertyChanging("IdProdotto");
                    this._IdProdotto = value;
                    this.SendPropertyChanged("IdProdotto");
                    this.OnIdProdottoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NProdotti in the schema.
        /// </summary>
        [Column(Name = @"nProdotti", Storage = "_NProdotti", CanBeNull = false, DbType = "BIGINT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long NProdotti
        {
            get
            {
                return this._NProdotti;
            }
            set
            {
                if (this._NProdotti != value)
                {
                    this.OnNProdottiChanging(value);
                    this.SendPropertyChanging("NProdotti");
                    this._NProdotti = value;
                    this.SendPropertyChanged("NProdotti");
                    this.OnNProdottiChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdVenditaNegozio in the schema.
        /// </summary>
        [Column(Storage = "_IdVenditaNegozio", DbType = "BIGINT NULL", UpdateCheck = UpdateCheck.Never)]
        public long? IdVenditaNegozio
        {
            get
            {
                return this._IdVenditaNegozio;
            }
            set
            {
                if (this._IdVenditaNegozio != value)
                {
                    if (this._AcquistoInNegozio.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdVenditaNegozioChanging(value);
                    this.SendPropertyChanging("IdVenditaNegozio");
                    this._IdVenditaNegozio = value;
                    this.SendPropertyChanged("IdVenditaNegozio");
                    this.OnIdVenditaNegozioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdVenditaOnline in the schema.
        /// </summary>
        [Column(Storage = "_IdVenditaOnline", DbType = "BIGINT NULL", UpdateCheck = UpdateCheck.Never)]
        public long? IdVenditaOnline
        {
            get
            {
                return this._IdVenditaOnline;
            }
            set
            {
                if (this._IdVenditaOnline != value)
                {
                    if (this._AcquistoOnline.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdVenditaOnlineChanging(value);
                    this.SendPropertyChanging("IdVenditaOnline");
                    this._IdVenditaOnline = value;
                    this.SendPropertyChanged("IdVenditaOnline");
                    this.OnIdVenditaOnlineChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdDettagli in the schema.
        /// </summary>
        [Column(Storage = "_IdDettagli", CanBeNull = false, DbType = "BIGINT NOT NULL", IsPrimaryKey = true)]
        public long IdDettagli
        {
            get
            {
                return this._IdDettagli;
            }
            set
            {
                if (this._IdDettagli != value)
                {
                    this.OnIdDettagliChanging(value);
                    this.SendPropertyChanging("IdDettagli");
                    this._IdDettagli = value;
                    this.SendPropertyChanged("IdDettagli");
                    this.OnIdDettagliChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AcquistoOnline in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="AcquistoOnline_Dettaglivendita", Storage="_AcquistoOnline", ThisKey="IdVenditaOnline", OtherKey="IdVendita", IsForeignKey=true)]
        public AcquistoOnline AcquistoOnline
        {
            get
            {
                return this._AcquistoOnline.Entity;
            }
            set
            {
                AcquistoOnline previousValue = this._AcquistoOnline.Entity;
                if ((previousValue != value) || (this._AcquistoOnline.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("AcquistoOnline");
                    if (previousValue != null)
                    {
                        this._AcquistoOnline.Entity = null;
                        previousValue.Dettaglivendita.Remove(this);
                    }
                    this._AcquistoOnline.Entity = value;
                    if (value != null)
                    {
                        this._IdVenditaOnline = value.IdVendita;
                        value.Dettaglivendita.Add(this);
                    }
                    else
                    {
                        this._IdVenditaOnline = default(long?);
                    }
                    this.SendPropertyChanged("AcquistoOnline");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Prodotto in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Prodotto_Dettaglivendita", Storage="_Prodotto", ThisKey="IdProdotto", OtherKey="IdProdotto", IsForeignKey=true)]
        public Prodotto Prodotto
        {
            get
            {
                return this._Prodotto.Entity;
            }
            set
            {
                Prodotto previousValue = this._Prodotto.Entity;
                if ((previousValue != value) || (this._Prodotto.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Prodotto");
                    if (previousValue != null)
                    {
                        this._Prodotto.Entity = null;
                        previousValue.Dettaglivendita.Remove(this);
                    }
                    this._Prodotto.Entity = value;
                    if (value != null)
                    {
                        this._IdProdotto = value.IdProdotto;
                        value.Dettaglivendita.Add(this);
                    }
                    else
                    {
                        this._IdProdotto = default(long);
                    }
                    this.SendPropertyChanged("Prodotto");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AcquistoInNegozio in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="AcquistoInNegozio_Dettaglivendita", Storage="_AcquistoInNegozio", ThisKey="IdVenditaNegozio", OtherKey="IdVendita", IsForeignKey=true)]
        public AcquistoInNegozio AcquistoInNegozio
        {
            get
            {
                return this._AcquistoInNegozio.Entity;
            }
            set
            {
                AcquistoInNegozio previousValue = this._AcquistoInNegozio.Entity;
                if ((previousValue != value) || (this._AcquistoInNegozio.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("AcquistoInNegozio");
                    if (previousValue != null)
                    {
                        this._AcquistoInNegozio.Entity = null;
                        previousValue.Dettaglivendita.Remove(this);
                    }
                    this._AcquistoInNegozio.Entity = value;
                    if (value != null)
                    {
                        this._IdVenditaNegozio = value.IdVendita;
                        value.Dettaglivendita.Add(this);
                    }
                    else
                    {
                        this._IdVenditaNegozio = default(long?);
                    }
                    this.SendPropertyChanged("AcquistoInNegozio");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for GamestartLogicContext.Dipendente in the schema.
    /// </summary>
    [Table(Name = @"gamestart_logic.dipendente")]
    public partial class Dipendente : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Nome;

        private string _Cognome;

        private System.DateTime _DataNascita;

        private string _CodFiscale;

        private string _CittÃ;

        private string _Via;

        private string _NCivico;

        private long _IdFiliale;
        #pragma warning restore 0649

        private EntitySet<AcquistoInNegozio> _AcquistoInNegozio;

        private EntityRef<Filiale> _Filiale;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnNomeChanging(string value);
        partial void OnNomeChanged();
        partial void OnCognomeChanging(string value);
        partial void OnCognomeChanged();
        partial void OnDataNascitaChanging(System.DateTime value);
        partial void OnDataNascitaChanged();
        partial void OnCodFiscaleChanging(string value);
        partial void OnCodFiscaleChanged();
        partial void OnCittÃChanging(string value);
        partial void OnCittÃChanged();
        partial void OnViaChanging(string value);
        partial void OnViaChanged();
        partial void OnNCivicoChanging(string value);
        partial void OnNCivicoChanged();
        partial void OnIdFilialeChanging(long value);
        partial void OnIdFilialeChanged();
        #endregion

        public Dipendente()
        {
            this._AcquistoInNegozio = new EntitySet<AcquistoInNegozio>(new Action<AcquistoInNegozio>(this.attach_AcquistoInNegozio), new Action<AcquistoInNegozio>(this.detach_AcquistoInNegozio));
            this._Filiale  = default(EntityRef<Filiale>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Nome in the schema.
        /// </summary>
        [Column(Storage = "_Nome", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Nome
        {
            get
            {
                return this._Nome;
            }
            set
            {
                if (this._Nome != value)
                {
                    this.OnNomeChanging(value);
                    this.SendPropertyChanging("Nome");
                    this._Nome = value;
                    this.SendPropertyChanged("Nome");
                    this.OnNomeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cognome in the schema.
        /// </summary>
        [Column(Storage = "_Cognome", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Cognome
        {
            get
            {
                return this._Cognome;
            }
            set
            {
                if (this._Cognome != value)
                {
                    this.OnCognomeChanging(value);
                    this.SendPropertyChanging("Cognome");
                    this._Cognome = value;
                    this.SendPropertyChanged("Cognome");
                    this.OnCognomeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DataNascita in the schema.
        /// </summary>
        [Column(Storage = "_DataNascita", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DataNascita
        {
            get
            {
                return this._DataNascita;
            }
            set
            {
                if (this._DataNascita != value)
                {
                    this.OnDataNascitaChanging(value);
                    this.SendPropertyChanging("DataNascita");
                    this._DataNascita = value;
                    this.SendPropertyChanged("DataNascita");
                    this.OnDataNascitaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CodFiscale in the schema.
        /// </summary>
        [Column(Storage = "_CodFiscale", CanBeNull = false, DbType = "CHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string CodFiscale
        {
            get
            {
                return this._CodFiscale;
            }
            set
            {
                if (this._CodFiscale != value)
                {
                    this.OnCodFiscaleChanging(value);
                    this.SendPropertyChanging("CodFiscale");
                    this._CodFiscale = value;
                    this.SendPropertyChanged("CodFiscale");
                    this.OnCodFiscaleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CittÃ in the schema.
        /// </summary>
        [Column(Name = @"`CittÃ `", Storage = "_CittÃ", DbType = "CHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string CittÃ
        {
            get
            {
                return this._CittÃ;
            }
            set
            {
                if (this._CittÃ != value)
                {
                    this.OnCittÃChanging(value);
                    this.SendPropertyChanging("CittÃ");
                    this._CittÃ = value;
                    this.SendPropertyChanged("CittÃ");
                    this.OnCittÃChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Via in the schema.
        /// </summary>
        [Column(Storage = "_Via", DbType = "CHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Via
        {
            get
            {
                return this._Via;
            }
            set
            {
                if (this._Via != value)
                {
                    this.OnViaChanging(value);
                    this.SendPropertyChanging("Via");
                    this._Via = value;
                    this.SendPropertyChanged("Via");
                    this.OnViaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NCivico in the schema.
        /// </summary>
        [Column(Name = @"nCivico", Storage = "_NCivico", DbType = "CHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string NCivico
        {
            get
            {
                return this._NCivico;
            }
            set
            {
                if (this._NCivico != value)
                {
                    this.OnNCivicoChanging(value);
                    this.SendPropertyChanging("NCivico");
                    this._NCivico = value;
                    this.SendPropertyChanged("NCivico");
                    this.OnNCivicoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdFiliale in the schema.
        /// </summary>
        [Column(Storage = "_IdFiliale", CanBeNull = false, DbType = "BIGINT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long IdFiliale
        {
            get
            {
                return this._IdFiliale;
            }
            set
            {
                if (this._IdFiliale != value)
                {
                    if (this._Filiale.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdFilialeChanging(value);
                    this.SendPropertyChanging("IdFiliale");
                    this._IdFiliale = value;
                    this.SendPropertyChanged("IdFiliale");
                    this.OnIdFilialeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AcquistoInNegozio in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Dipendente_AcquistoInNegozio", Storage="_AcquistoInNegozio", ThisKey="CodFiscale", OtherKey="CodFiscaleDipendente", DeleteRule="NO ACTION")]
        public EntitySet<AcquistoInNegozio> AcquistoInNegozio
        {
            get
            {
                return this._AcquistoInNegozio;
            }
            set
            {
                this._AcquistoInNegozio.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Filiale in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Filiale_Dipendente", Storage="_Filiale", ThisKey="IdFiliale", OtherKey="IdFiliale", IsForeignKey=true)]
        public Filiale Filiale
        {
            get
            {
                return this._Filiale.Entity;
            }
            set
            {
                Filiale previousValue = this._Filiale.Entity;
                if ((previousValue != value) || (this._Filiale.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Filiale");
                    if (previousValue != null)
                    {
                        this._Filiale.Entity = null;
                        previousValue.Dipendente.Remove(this);
                    }
                    this._Filiale.Entity = value;
                    if (value != null)
                    {
                        this._IdFiliale = value.IdFiliale;
                        value.Dipendente.Add(this);
                    }
                    else
                    {
                        this._IdFiliale = default(long);
                    }
                    this.SendPropertyChanged("Filiale");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_AcquistoInNegozio(AcquistoInNegozio entity)
        {
            this.SendPropertyChanging("AcquistoInNegozio");
            entity.Dipendente = this;
        }
    
        private void detach_AcquistoInNegozio(AcquistoInNegozio entity)
        {
            this.SendPropertyChanging("AcquistoInNegozio");
            entity.Dipendente = null;
        }
    }

    /// <summary>
    /// There are no comments for GamestartLogicContext.Filiale in the schema.
    /// </summary>
    [Table(Name = @"gamestart_logic.filiale")]
    public partial class Filiale : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _IdFiliale;

        private string _CodFiscale;

        private string _CittÃ;

        private string _Via;

        private string _NCivico;
        #pragma warning restore 0649

        private EntitySet<Dipendente> _Dipendente;

        private EntityRef<Gestore> _Gestore;

        private EntitySet<Torneo> _Torneo;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdFilialeChanging(long value);
        partial void OnIdFilialeChanged();
        partial void OnCodFiscaleChanging(string value);
        partial void OnCodFiscaleChanged();
        partial void OnCittÃChanging(string value);
        partial void OnCittÃChanged();
        partial void OnViaChanging(string value);
        partial void OnViaChanged();
        partial void OnNCivicoChanging(string value);
        partial void OnNCivicoChanged();
        #endregion

        public Filiale()
        {
            this._Dipendente = new EntitySet<Dipendente>(new Action<Dipendente>(this.attach_Dipendente), new Action<Dipendente>(this.detach_Dipendente));
            this._Gestore  = default(EntityRef<Gestore>);
            this._Torneo = new EntitySet<Torneo>(new Action<Torneo>(this.attach_Torneo), new Action<Torneo>(this.detach_Torneo));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdFiliale in the schema.
        /// </summary>
        [Column(Storage = "_IdFiliale", CanBeNull = false, DbType = "BIGINT NOT NULL", IsPrimaryKey = true)]
        public long IdFiliale
        {
            get
            {
                return this._IdFiliale;
            }
            set
            {
                if (this._IdFiliale != value)
                {
                    this.OnIdFilialeChanging(value);
                    this.SendPropertyChanging("IdFiliale");
                    this._IdFiliale = value;
                    this.SendPropertyChanged("IdFiliale");
                    this.OnIdFilialeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CodFiscale in the schema.
        /// </summary>
        [Column(Storage = "_CodFiscale", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CodFiscale
        {
            get
            {
                return this._CodFiscale;
            }
            set
            {
                if (this._CodFiscale != value)
                {
                    if (this._Gestore.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCodFiscaleChanging(value);
                    this.SendPropertyChanging("CodFiscale");
                    this._CodFiscale = value;
                    this.SendPropertyChanged("CodFiscale");
                    this.OnCodFiscaleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CittÃ in the schema.
        /// </summary>
        [Column(Name = @"`CittÃ `", Storage = "_CittÃ", DbType = "CHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string CittÃ
        {
            get
            {
                return this._CittÃ;
            }
            set
            {
                if (this._CittÃ != value)
                {
                    this.OnCittÃChanging(value);
                    this.SendPropertyChanging("CittÃ");
                    this._CittÃ = value;
                    this.SendPropertyChanged("CittÃ");
                    this.OnCittÃChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Via in the schema.
        /// </summary>
        [Column(Storage = "_Via", DbType = "CHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Via
        {
            get
            {
                return this._Via;
            }
            set
            {
                if (this._Via != value)
                {
                    this.OnViaChanging(value);
                    this.SendPropertyChanging("Via");
                    this._Via = value;
                    this.SendPropertyChanged("Via");
                    this.OnViaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NCivico in the schema.
        /// </summary>
        [Column(Name = @"nCivico", Storage = "_NCivico", DbType = "CHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string NCivico
        {
            get
            {
                return this._NCivico;
            }
            set
            {
                if (this._NCivico != value)
                {
                    this.OnNCivicoChanging(value);
                    this.SendPropertyChanging("NCivico");
                    this._NCivico = value;
                    this.SendPropertyChanged("NCivico");
                    this.OnNCivicoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dipendente in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Filiale_Dipendente", Storage="_Dipendente", ThisKey="IdFiliale", OtherKey="IdFiliale", DeleteRule="NO ACTION")]
        public EntitySet<Dipendente> Dipendente
        {
            get
            {
                return this._Dipendente;
            }
            set
            {
                this._Dipendente.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Gestore in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Gestore_Filiale", Storage="_Gestore", ThisKey="CodFiscale", OtherKey="CodFiscale", IsForeignKey=true)]
        public Gestore Gestore
        {
            get
            {
                return this._Gestore.Entity;
            }
            set
            {
                Gestore previousValue = this._Gestore.Entity;
                if ((previousValue != value) || (this._Gestore.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Gestore");
                    if (previousValue != null)
                    {
                        this._Gestore.Entity = null;
                        previousValue.Filiale.Remove(this);
                    }
                    this._Gestore.Entity = value;
                    if (value != null)
                    {
                        this._CodFiscale = value.CodFiscale;
                        value.Filiale.Add(this);
                    }
                    else
                    {
                        this._CodFiscale = default(string);
                    }
                    this.SendPropertyChanged("Gestore");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Torneo in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Filiale_Torneo", Storage="_Torneo", ThisKey="IdFiliale", OtherKey="IdFiliale", DeleteRule="NO ACTION")]
        public EntitySet<Torneo> Torneo
        {
            get
            {
                return this._Torneo;
            }
            set
            {
                this._Torneo.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Dipendente(Dipendente entity)
        {
            this.SendPropertyChanging("Dipendente");
            entity.Filiale = this;
        }
    
        private void detach_Dipendente(Dipendente entity)
        {
            this.SendPropertyChanging("Dipendente");
            entity.Filiale = null;
        }

        private void attach_Torneo(Torneo entity)
        {
            this.SendPropertyChanging("Torneo");
            entity.Filiale = this;
        }
    
        private void detach_Torneo(Torneo entity)
        {
            this.SendPropertyChanging("Torneo");
            entity.Filiale = null;
        }
    }

    /// <summary>
    /// There are no comments for GamestartLogicContext.Gestore in the schema.
    /// </summary>
    [Table(Name = @"gamestart_logic.gestore")]
    public partial class Gestore : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Nome;

        private string _Cognome;

        private System.DateTime _DataNascita;

        private string _CodFiscale;

        private string _CittÃ;

        private string _Via;

        private string _NCivico;
        #pragma warning restore 0649

        private EntitySet<Filiale> _Filiale;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnNomeChanging(string value);
        partial void OnNomeChanged();
        partial void OnCognomeChanging(string value);
        partial void OnCognomeChanged();
        partial void OnDataNascitaChanging(System.DateTime value);
        partial void OnDataNascitaChanged();
        partial void OnCodFiscaleChanging(string value);
        partial void OnCodFiscaleChanged();
        partial void OnCittÃChanging(string value);
        partial void OnCittÃChanged();
        partial void OnViaChanging(string value);
        partial void OnViaChanged();
        partial void OnNCivicoChanging(string value);
        partial void OnNCivicoChanged();
        #endregion

        public Gestore()
        {
            this._Filiale = new EntitySet<Filiale>(new Action<Filiale>(this.attach_Filiale), new Action<Filiale>(this.detach_Filiale));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Nome in the schema.
        /// </summary>
        [Column(Storage = "_Nome", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Nome
        {
            get
            {
                return this._Nome;
            }
            set
            {
                if (this._Nome != value)
                {
                    this.OnNomeChanging(value);
                    this.SendPropertyChanging("Nome");
                    this._Nome = value;
                    this.SendPropertyChanged("Nome");
                    this.OnNomeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cognome in the schema.
        /// </summary>
        [Column(Storage = "_Cognome", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Cognome
        {
            get
            {
                return this._Cognome;
            }
            set
            {
                if (this._Cognome != value)
                {
                    this.OnCognomeChanging(value);
                    this.SendPropertyChanging("Cognome");
                    this._Cognome = value;
                    this.SendPropertyChanged("Cognome");
                    this.OnCognomeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DataNascita in the schema.
        /// </summary>
        [Column(Storage = "_DataNascita", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DataNascita
        {
            get
            {
                return this._DataNascita;
            }
            set
            {
                if (this._DataNascita != value)
                {
                    this.OnDataNascitaChanging(value);
                    this.SendPropertyChanging("DataNascita");
                    this._DataNascita = value;
                    this.SendPropertyChanged("DataNascita");
                    this.OnDataNascitaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CodFiscale in the schema.
        /// </summary>
        [Column(Storage = "_CodFiscale", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string CodFiscale
        {
            get
            {
                return this._CodFiscale;
            }
            set
            {
                if (this._CodFiscale != value)
                {
                    this.OnCodFiscaleChanging(value);
                    this.SendPropertyChanging("CodFiscale");
                    this._CodFiscale = value;
                    this.SendPropertyChanged("CodFiscale");
                    this.OnCodFiscaleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CittÃ in the schema.
        /// </summary>
        [Column(Name = @"`CittÃ `", Storage = "_CittÃ", DbType = "CHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string CittÃ
        {
            get
            {
                return this._CittÃ;
            }
            set
            {
                if (this._CittÃ != value)
                {
                    this.OnCittÃChanging(value);
                    this.SendPropertyChanging("CittÃ");
                    this._CittÃ = value;
                    this.SendPropertyChanged("CittÃ");
                    this.OnCittÃChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Via in the schema.
        /// </summary>
        [Column(Storage = "_Via", DbType = "CHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Via
        {
            get
            {
                return this._Via;
            }
            set
            {
                if (this._Via != value)
                {
                    this.OnViaChanging(value);
                    this.SendPropertyChanging("Via");
                    this._Via = value;
                    this.SendPropertyChanged("Via");
                    this.OnViaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NCivico in the schema.
        /// </summary>
        [Column(Name = @"nCivico", Storage = "_NCivico", DbType = "CHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string NCivico
        {
            get
            {
                return this._NCivico;
            }
            set
            {
                if (this._NCivico != value)
                {
                    this.OnNCivicoChanging(value);
                    this.SendPropertyChanging("NCivico");
                    this._NCivico = value;
                    this.SendPropertyChanged("NCivico");
                    this.OnNCivicoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Filiale in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Gestore_Filiale", Storage="_Filiale", ThisKey="CodFiscale", OtherKey="CodFiscale", DeleteRule="NO ACTION")]
        public EntitySet<Filiale> Filiale
        {
            get
            {
                return this._Filiale;
            }
            set
            {
                this._Filiale.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Filiale(Filiale entity)
        {
            this.SendPropertyChanging("Filiale");
            entity.Gestore = this;
        }
    
        private void detach_Filiale(Filiale entity)
        {
            this.SendPropertyChanging("Filiale");
            entity.Gestore = null;
        }
    }

    /// <summary>
    /// There are no comments for GamestartLogicContext.Offerta in the schema.
    /// </summary>
    [Table(Name = @"gamestart_logic.offerta")]
    public partial class Offerta : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _IdAbbonamento;

        private long _IdPromozione;

        private int _IdOfferta;
        #pragma warning restore 0649

        private EntityRef<Abbonamento> _Abbonamento;

        private EntityRef<Promozione> _Promozione;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdAbbonamentoChanging(long value);
        partial void OnIdAbbonamentoChanged();
        partial void OnIdPromozioneChanging(long value);
        partial void OnIdPromozioneChanged();
        partial void OnIdOffertaChanging(int value);
        partial void OnIdOffertaChanged();
        #endregion

        public Offerta()
        {
            this._Abbonamento  = default(EntityRef<Abbonamento>);
            this._Promozione  = default(EntityRef<Promozione>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdAbbonamento in the schema.
        /// </summary>
        [Column(Storage = "_IdAbbonamento", CanBeNull = false, DbType = "BIGINT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long IdAbbonamento
        {
            get
            {
                return this._IdAbbonamento;
            }
            set
            {
                if (this._IdAbbonamento != value)
                {
                    if (this._Abbonamento.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdAbbonamentoChanging(value);
                    this.SendPropertyChanging("IdAbbonamento");
                    this._IdAbbonamento = value;
                    this.SendPropertyChanged("IdAbbonamento");
                    this.OnIdAbbonamentoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdPromozione in the schema.
        /// </summary>
        [Column(Storage = "_IdPromozione", CanBeNull = false, DbType = "BIGINT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long IdPromozione
        {
            get
            {
                return this._IdPromozione;
            }
            set
            {
                if (this._IdPromozione != value)
                {
                    if (this._Promozione.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdPromozioneChanging(value);
                    this.SendPropertyChanging("IdPromozione");
                    this._IdPromozione = value;
                    this.SendPropertyChanged("IdPromozione");
                    this.OnIdPromozioneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdOfferta in the schema.
        /// </summary>
        [Column(Storage = "_IdOfferta", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int IdOfferta
        {
            get
            {
                return this._IdOfferta;
            }
            set
            {
                if (this._IdOfferta != value)
                {
                    this.OnIdOffertaChanging(value);
                    this.SendPropertyChanging("IdOfferta");
                    this._IdOfferta = value;
                    this.SendPropertyChanged("IdOfferta");
                    this.OnIdOffertaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Abbonamento in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Abbonamento_Offerta", Storage="_Abbonamento", ThisKey="IdAbbonamento", OtherKey="IdAbbonamento", IsForeignKey=true)]
        public Abbonamento Abbonamento
        {
            get
            {
                return this._Abbonamento.Entity;
            }
            set
            {
                Abbonamento previousValue = this._Abbonamento.Entity;
                if ((previousValue != value) || (this._Abbonamento.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Abbonamento");
                    if (previousValue != null)
                    {
                        this._Abbonamento.Entity = null;
                        previousValue.Offerta.Remove(this);
                    }
                    this._Abbonamento.Entity = value;
                    if (value != null)
                    {
                        this._IdAbbonamento = value.IdAbbonamento;
                        value.Offerta.Add(this);
                    }
                    else
                    {
                        this._IdAbbonamento = default(long);
                    }
                    this.SendPropertyChanged("Abbonamento");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Promozione in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Promozione_Offerta", Storage="_Promozione", ThisKey="IdPromozione", OtherKey="IdPromozione", IsForeignKey=true)]
        public Promozione Promozione
        {
            get
            {
                return this._Promozione.Entity;
            }
            set
            {
                Promozione previousValue = this._Promozione.Entity;
                if ((previousValue != value) || (this._Promozione.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Promozione");
                    if (previousValue != null)
                    {
                        this._Promozione.Entity = null;
                        previousValue.Offerta.Remove(this);
                    }
                    this._Promozione.Entity = value;
                    if (value != null)
                    {
                        this._IdPromozione = value.IdPromozione;
                        value.Offerta.Add(this);
                    }
                    else
                    {
                        this._IdPromozione = default(long);
                    }
                    this.SendPropertyChanged("Promozione");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for GamestartLogicContext.Preordine in the schema.
    /// </summary>
    [Table(Name = @"gamestart_logic.preordine")]
    public partial class Preordine : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _IdPreordine;

        private System.DateTime _DataVendita;

        private System.DateTime _DataUscitaProdotto;

        private long _IdProdotto;

        private string _CodFiscale;
        #pragma warning restore 0649

        private EntityRef<Cliente> _Cliente;

        private EntityRef<Prodotto> _Prodotto;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdPreordineChanging(long value);
        partial void OnIdPreordineChanged();
        partial void OnDataVenditaChanging(System.DateTime value);
        partial void OnDataVenditaChanged();
        partial void OnDataUscitaProdottoChanging(System.DateTime value);
        partial void OnDataUscitaProdottoChanged();
        partial void OnIdProdottoChanging(long value);
        partial void OnIdProdottoChanged();
        partial void OnCodFiscaleChanging(string value);
        partial void OnCodFiscaleChanged();
        #endregion

        public Preordine()
        {
            this._Cliente  = default(EntityRef<Cliente>);
            this._Prodotto  = default(EntityRef<Prodotto>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdPreordine in the schema.
        /// </summary>
        [Column(Storage = "_IdPreordine", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "BIGINT NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long IdPreordine
        {
            get
            {
                return this._IdPreordine;
            }
            set
            {
                if (this._IdPreordine != value)
                {
                    this.OnIdPreordineChanging(value);
                    this.SendPropertyChanging("IdPreordine");
                    this._IdPreordine = value;
                    this.SendPropertyChanged("IdPreordine");
                    this.OnIdPreordineChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DataVendita in the schema.
        /// </summary>
        [Column(Storage = "_DataVendita", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DataVendita
        {
            get
            {
                return this._DataVendita;
            }
            set
            {
                if (this._DataVendita != value)
                {
                    this.OnDataVenditaChanging(value);
                    this.SendPropertyChanging("DataVendita");
                    this._DataVendita = value;
                    this.SendPropertyChanged("DataVendita");
                    this.OnDataVenditaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DataUscitaProdotto in the schema.
        /// </summary>
        [Column(Storage = "_DataUscitaProdotto", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DataUscitaProdotto
        {
            get
            {
                return this._DataUscitaProdotto;
            }
            set
            {
                if (this._DataUscitaProdotto != value)
                {
                    this.OnDataUscitaProdottoChanging(value);
                    this.SendPropertyChanging("DataUscitaProdotto");
                    this._DataUscitaProdotto = value;
                    this.SendPropertyChanged("DataUscitaProdotto");
                    this.OnDataUscitaProdottoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdProdotto in the schema.
        /// </summary>
        [Column(Storage = "_IdProdotto", CanBeNull = false, DbType = "BIGINT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long IdProdotto
        {
            get
            {
                return this._IdProdotto;
            }
            set
            {
                if (this._IdProdotto != value)
                {
                    if (this._Prodotto.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdProdottoChanging(value);
                    this.SendPropertyChanging("IdProdotto");
                    this._IdProdotto = value;
                    this.SendPropertyChanged("IdProdotto");
                    this.OnIdProdottoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CodFiscale in the schema.
        /// </summary>
        [Column(Storage = "_CodFiscale", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CodFiscale
        {
            get
            {
                return this._CodFiscale;
            }
            set
            {
                if (this._CodFiscale != value)
                {
                    if (this._Cliente.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCodFiscaleChanging(value);
                    this.SendPropertyChanging("CodFiscale");
                    this._CodFiscale = value;
                    this.SendPropertyChanged("CodFiscale");
                    this.OnCodFiscaleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cliente in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Cliente_Preordine", Storage="_Cliente", ThisKey="CodFiscale", OtherKey="CodFiscale", IsForeignKey=true)]
        public Cliente Cliente
        {
            get
            {
                return this._Cliente.Entity;
            }
            set
            {
                Cliente previousValue = this._Cliente.Entity;
                if ((previousValue != value) || (this._Cliente.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Cliente");
                    if (previousValue != null)
                    {
                        this._Cliente.Entity = null;
                        previousValue.Preordine.Remove(this);
                    }
                    this._Cliente.Entity = value;
                    if (value != null)
                    {
                        this._CodFiscale = value.CodFiscale;
                        value.Preordine.Add(this);
                    }
                    else
                    {
                        this._CodFiscale = default(string);
                    }
                    this.SendPropertyChanged("Cliente");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Prodotto in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Prodotto_Preordine", Storage="_Prodotto", ThisKey="IdProdotto", OtherKey="IdProdotto", IsForeignKey=true)]
        public Prodotto Prodotto
        {
            get
            {
                return this._Prodotto.Entity;
            }
            set
            {
                Prodotto previousValue = this._Prodotto.Entity;
                if ((previousValue != value) || (this._Prodotto.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Prodotto");
                    if (previousValue != null)
                    {
                        this._Prodotto.Entity = null;
                        previousValue.Preordine.Remove(this);
                    }
                    this._Prodotto.Entity = value;
                    if (value != null)
                    {
                        this._IdProdotto = value.IdProdotto;
                        value.Preordine.Add(this);
                    }
                    else
                    {
                        this._IdProdotto = default(long);
                    }
                    this.SendPropertyChanged("Prodotto");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for GamestartLogicContext.Prodotto in the schema.
    /// </summary>
    [Table(Name = @"gamestart_logic.prodotto")]
    public partial class Prodotto : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _IdProdotto;

        private double _Prezzo;

        private string _Tipologia;

        private string _Nome;
        #pragma warning restore 0649

        private EntitySet<Dettaglivendita> _Dettaglivendita;

        private EntitySet<Preordine> _Preordine;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdProdottoChanging(long value);
        partial void OnIdProdottoChanged();
        partial void OnPrezzoChanging(double value);
        partial void OnPrezzoChanged();
        partial void OnTipologiaChanging(string value);
        partial void OnTipologiaChanged();
        partial void OnNomeChanging(string value);
        partial void OnNomeChanged();
        #endregion

        public Prodotto()
        {
            this._Dettaglivendita = new EntitySet<Dettaglivendita>(new Action<Dettaglivendita>(this.attach_Dettaglivendita), new Action<Dettaglivendita>(this.detach_Dettaglivendita));
            this._Preordine = new EntitySet<Preordine>(new Action<Preordine>(this.attach_Preordine), new Action<Preordine>(this.detach_Preordine));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdProdotto in the schema.
        /// </summary>
        [Column(Storage = "_IdProdotto", CanBeNull = false, DbType = "BIGINT NOT NULL", IsPrimaryKey = true)]
        public long IdProdotto
        {
            get
            {
                return this._IdProdotto;
            }
            set
            {
                if (this._IdProdotto != value)
                {
                    this.OnIdProdottoChanging(value);
                    this.SendPropertyChanging("IdProdotto");
                    this._IdProdotto = value;
                    this.SendPropertyChanged("IdProdotto");
                    this.OnIdProdottoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Prezzo in the schema.
        /// </summary>
        [Column(Storage = "_Prezzo", CanBeNull = false, DbType = "DOUBLE(50,0) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double Prezzo
        {
            get
            {
                return this._Prezzo;
            }
            set
            {
                if (this._Prezzo != value)
                {
                    this.OnPrezzoChanging(value);
                    this.SendPropertyChanging("Prezzo");
                    this._Prezzo = value;
                    this.SendPropertyChanged("Prezzo");
                    this.OnPrezzoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Tipologia in the schema.
        /// </summary>
        [Column(Storage = "_Tipologia", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Tipologia
        {
            get
            {
                return this._Tipologia;
            }
            set
            {
                if (this._Tipologia != value)
                {
                    this.OnTipologiaChanging(value);
                    this.SendPropertyChanging("Tipologia");
                    this._Tipologia = value;
                    this.SendPropertyChanged("Tipologia");
                    this.OnTipologiaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Nome in the schema.
        /// </summary>
        [Column(Storage = "_Nome", DbType = "CHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Nome
        {
            get
            {
                return this._Nome;
            }
            set
            {
                if (this._Nome != value)
                {
                    this.OnNomeChanging(value);
                    this.SendPropertyChanging("Nome");
                    this._Nome = value;
                    this.SendPropertyChanged("Nome");
                    this.OnNomeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Dettaglivendita in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Prodotto_Dettaglivendita", Storage="_Dettaglivendita", ThisKey="IdProdotto", OtherKey="IdProdotto", DeleteRule="NO ACTION")]
        public EntitySet<Dettaglivendita> Dettaglivendita
        {
            get
            {
                return this._Dettaglivendita;
            }
            set
            {
                this._Dettaglivendita.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Preordine in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Prodotto_Preordine", Storage="_Preordine", ThisKey="IdProdotto", OtherKey="IdProdotto", DeleteRule="NO ACTION")]
        public EntitySet<Preordine> Preordine
        {
            get
            {
                return this._Preordine;
            }
            set
            {
                this._Preordine.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Dettaglivendita(Dettaglivendita entity)
        {
            this.SendPropertyChanging("Dettaglivendita");
            entity.Prodotto = this;
        }
    
        private void detach_Dettaglivendita(Dettaglivendita entity)
        {
            this.SendPropertyChanging("Dettaglivendita");
            entity.Prodotto = null;
        }

        private void attach_Preordine(Preordine entity)
        {
            this.SendPropertyChanging("Preordine");
            entity.Prodotto = this;
        }
    
        private void detach_Preordine(Preordine entity)
        {
            this.SendPropertyChanging("Preordine");
            entity.Prodotto = null;
        }
    }

    /// <summary>
    /// There are no comments for GamestartLogicContext.Promozione in the schema.
    /// </summary>
    [Table(Name = @"gamestart_logic.promozione")]
    public partial class Promozione : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Descrizione;

        private long _IdPromozione;

        private long _Sconto;

        private System.DateTime _DataInizio;

        private System.DateTime _DataFine;
        #pragma warning restore 0649

        private EntitySet<AcquistoInNegozio> _AcquistoInNegozio;

        private EntitySet<AcquistoOnline> _AcquistoOnline;

        private EntitySet<Offerta> _Offerta;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnDescrizioneChanging(string value);
        partial void OnDescrizioneChanged();
        partial void OnIdPromozioneChanging(long value);
        partial void OnIdPromozioneChanged();
        partial void OnScontoChanging(long value);
        partial void OnScontoChanged();
        partial void OnDataInizioChanging(System.DateTime value);
        partial void OnDataInizioChanged();
        partial void OnDataFineChanging(System.DateTime value);
        partial void OnDataFineChanged();
        #endregion

        public Promozione()
        {
            this._AcquistoInNegozio = new EntitySet<AcquistoInNegozio>(new Action<AcquistoInNegozio>(this.attach_AcquistoInNegozio), new Action<AcquistoInNegozio>(this.detach_AcquistoInNegozio));
            this._AcquistoOnline = new EntitySet<AcquistoOnline>(new Action<AcquistoOnline>(this.attach_AcquistoOnline), new Action<AcquistoOnline>(this.detach_AcquistoOnline));
            this._Offerta = new EntitySet<Offerta>(new Action<Offerta>(this.attach_Offerta), new Action<Offerta>(this.detach_Offerta));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Descrizione in the schema.
        /// </summary>
        [Column(Storage = "_Descrizione", DbType = "CHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Descrizione
        {
            get
            {
                return this._Descrizione;
            }
            set
            {
                if (this._Descrizione != value)
                {
                    this.OnDescrizioneChanging(value);
                    this.SendPropertyChanging("Descrizione");
                    this._Descrizione = value;
                    this.SendPropertyChanged("Descrizione");
                    this.OnDescrizioneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdPromozione in the schema.
        /// </summary>
        [Column(Storage = "_IdPromozione", CanBeNull = false, DbType = "BIGINT NOT NULL", IsPrimaryKey = true)]
        public long IdPromozione
        {
            get
            {
                return this._IdPromozione;
            }
            set
            {
                if (this._IdPromozione != value)
                {
                    this.OnIdPromozioneChanging(value);
                    this.SendPropertyChanging("IdPromozione");
                    this._IdPromozione = value;
                    this.SendPropertyChanged("IdPromozione");
                    this.OnIdPromozioneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Sconto in the schema.
        /// </summary>
        [Column(Storage = "_Sconto", CanBeNull = false, DbType = "BIGINT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long Sconto
        {
            get
            {
                return this._Sconto;
            }
            set
            {
                if (this._Sconto != value)
                {
                    this.OnScontoChanging(value);
                    this.SendPropertyChanging("Sconto");
                    this._Sconto = value;
                    this.SendPropertyChanged("Sconto");
                    this.OnScontoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DataInizio in the schema.
        /// </summary>
        [Column(Storage = "_DataInizio", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DataInizio
        {
            get
            {
                return this._DataInizio;
            }
            set
            {
                if (this._DataInizio != value)
                {
                    this.OnDataInizioChanging(value);
                    this.SendPropertyChanging("DataInizio");
                    this._DataInizio = value;
                    this.SendPropertyChanged("DataInizio");
                    this.OnDataInizioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DataFine in the schema.
        /// </summary>
        [Column(Storage = "_DataFine", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DataFine
        {
            get
            {
                return this._DataFine;
            }
            set
            {
                if (this._DataFine != value)
                {
                    this.OnDataFineChanging(value);
                    this.SendPropertyChanging("DataFine");
                    this._DataFine = value;
                    this.SendPropertyChanged("DataFine");
                    this.OnDataFineChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AcquistoInNegozio in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Promozione_AcquistoInNegozio", Storage="_AcquistoInNegozio", ThisKey="IdPromozione", OtherKey="IdPromozione", DeleteRule="NO ACTION")]
        public EntitySet<AcquistoInNegozio> AcquistoInNegozio
        {
            get
            {
                return this._AcquistoInNegozio;
            }
            set
            {
                this._AcquistoInNegozio.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for AcquistoOnline in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Promozione_AcquistoOnline", Storage="_AcquistoOnline", ThisKey="IdPromozione", OtherKey="IdPromozione", DeleteRule="NO ACTION")]
        public EntitySet<AcquistoOnline> AcquistoOnline
        {
            get
            {
                return this._AcquistoOnline;
            }
            set
            {
                this._AcquistoOnline.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Offerta in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Promozione_Offerta", Storage="_Offerta", ThisKey="IdPromozione", OtherKey="IdPromozione", DeleteRule="NO ACTION")]
        public EntitySet<Offerta> Offerta
        {
            get
            {
                return this._Offerta;
            }
            set
            {
                this._Offerta.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_AcquistoInNegozio(AcquistoInNegozio entity)
        {
            this.SendPropertyChanging("AcquistoInNegozio");
            entity.Promozione = this;
        }
    
        private void detach_AcquistoInNegozio(AcquistoInNegozio entity)
        {
            this.SendPropertyChanging("AcquistoInNegozio");
            entity.Promozione = null;
        }

        private void attach_AcquistoOnline(AcquistoOnline entity)
        {
            this.SendPropertyChanging("AcquistoOnline");
            entity.Promozione = this;
        }
    
        private void detach_AcquistoOnline(AcquistoOnline entity)
        {
            this.SendPropertyChanging("AcquistoOnline");
            entity.Promozione = null;
        }

        private void attach_Offerta(Offerta entity)
        {
            this.SendPropertyChanging("Offerta");
            entity.Promozione = this;
        }
    
        private void detach_Offerta(Offerta entity)
        {
            this.SendPropertyChanging("Offerta");
            entity.Promozione = null;
        }
    }

    /// <summary>
    /// There are no comments for GamestartLogicContext.Spedizione in the schema.
    /// </summary>
    [Table(Name = @"gamestart_logic.spedizione")]
    public partial class Spedizione : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _IdVendita;

        private System.DateTime _DataOrdinazione;

        private long _IdSpedizione;

        private System.DateTime? _DataConsegna;

        private long _IdCorriere;
        #pragma warning restore 0649

        private EntityRef<Corriere> _Corriere;

        private EntityRef<AcquistoOnline> _AcquistoOnline;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdVenditaChanging(long value);
        partial void OnIdVenditaChanged();
        partial void OnDataOrdinazioneChanging(System.DateTime value);
        partial void OnDataOrdinazioneChanged();
        partial void OnIdSpedizioneChanging(long value);
        partial void OnIdSpedizioneChanged();
        partial void OnDataConsegnaChanging(System.DateTime? value);
        partial void OnDataConsegnaChanged();
        partial void OnIdCorriereChanging(long value);
        partial void OnIdCorriereChanged();
        #endregion

        public Spedizione()
        {
            this._Corriere  = default(EntityRef<Corriere>);
            this._AcquistoOnline  = default(EntityRef<AcquistoOnline>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdVendita in the schema.
        /// </summary>
        [Column(Storage = "_IdVendita", CanBeNull = false, DbType = "BIGINT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long IdVendita
        {
            get
            {
                return this._IdVendita;
            }
            set
            {
                if (this._IdVendita != value)
                {
                    if (this._AcquistoOnline.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdVenditaChanging(value);
                    this.SendPropertyChanging("IdVendita");
                    this._IdVendita = value;
                    this.SendPropertyChanged("IdVendita");
                    this.OnIdVenditaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DataOrdinazione in the schema.
        /// </summary>
        [Column(Storage = "_DataOrdinazione", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DataOrdinazione
        {
            get
            {
                return this._DataOrdinazione;
            }
            set
            {
                if (this._DataOrdinazione != value)
                {
                    this.OnDataOrdinazioneChanging(value);
                    this.SendPropertyChanging("DataOrdinazione");
                    this._DataOrdinazione = value;
                    this.SendPropertyChanged("DataOrdinazione");
                    this.OnDataOrdinazioneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdSpedizione in the schema.
        /// </summary>
        [Column(Storage = "_IdSpedizione", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "BIGINT NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long IdSpedizione
        {
            get
            {
                return this._IdSpedizione;
            }
            set
            {
                if (this._IdSpedizione != value)
                {
                    this.OnIdSpedizioneChanging(value);
                    this.SendPropertyChanging("IdSpedizione");
                    this._IdSpedizione = value;
                    this.SendPropertyChanged("IdSpedizione");
                    this.OnIdSpedizioneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DataConsegna in the schema.
        /// </summary>
        [Column(Storage = "_DataConsegna", DbType = "DATE NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? DataConsegna
        {
            get
            {
                return this._DataConsegna;
            }
            set
            {
                if (this._DataConsegna != value)
                {
                    this.OnDataConsegnaChanging(value);
                    this.SendPropertyChanging("DataConsegna");
                    this._DataConsegna = value;
                    this.SendPropertyChanged("DataConsegna");
                    this.OnDataConsegnaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdCorriere in the schema.
        /// </summary>
        [Column(Storage = "_IdCorriere", CanBeNull = false, DbType = "BIGINT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long IdCorriere
        {
            get
            {
                return this._IdCorriere;
            }
            set
            {
                if (this._IdCorriere != value)
                {
                    if (this._Corriere.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdCorriereChanging(value);
                    this.SendPropertyChanging("IdCorriere");
                    this._IdCorriere = value;
                    this.SendPropertyChanged("IdCorriere");
                    this.OnIdCorriereChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Corriere in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Corriere_Spedizione", Storage="_Corriere", ThisKey="IdCorriere", OtherKey="IdCorriere", IsForeignKey=true)]
        public Corriere Corriere
        {
            get
            {
                return this._Corriere.Entity;
            }
            set
            {
                Corriere previousValue = this._Corriere.Entity;
                if ((previousValue != value) || (this._Corriere.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Corriere");
                    if (previousValue != null)
                    {
                        this._Corriere.Entity = null;
                        previousValue.Spedizione.Remove(this);
                    }
                    this._Corriere.Entity = value;
                    if (value != null)
                    {
                        this._IdCorriere = value.IdCorriere;
                        value.Spedizione.Add(this);
                    }
                    else
                    {
                        this._IdCorriere = default(long);
                    }
                    this.SendPropertyChanged("Corriere");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AcquistoOnline in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="AcquistoOnline_Spedizione", Storage="_AcquistoOnline", ThisKey="IdVendita", OtherKey="IdVendita", IsForeignKey=true)]
        public AcquistoOnline AcquistoOnline
        {
            get
            {
                return this._AcquistoOnline.Entity;
            }
            set
            {
                AcquistoOnline previousValue = this._AcquistoOnline.Entity;
                if ((previousValue != value) || (this._AcquistoOnline.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("AcquistoOnline");
                    if (previousValue != null)
                    {
                        this._AcquistoOnline.Entity = null;
                        previousValue.Spedizione.Remove(this);
                    }
                    this._AcquistoOnline.Entity = value;
                    if (value != null)
                    {
                        this._IdVendita = value.IdVendita;
                        value.Spedizione.Add(this);
                    }
                    else
                    {
                        this._IdVendita = default(long);
                    }
                    this.SendPropertyChanged("AcquistoOnline");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for GamestartLogicContext.Torneo in the schema.
    /// </summary>
    [Table(Name = @"gamestart_logic.torneo")]
    public partial class Torneo : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _IdFiliale;

        private string _Gioco;

        private string _Premio;

        private System.DateTime _DataTorneo;

        private long _NPartecipanti;
        #pragma warning restore 0649

        private EntityRef<Filiale> _Filiale;

        private EntitySet<Abbonamento> _Abbonamento;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdFilialeChanging(long value);
        partial void OnIdFilialeChanged();
        partial void OnGiocoChanging(string value);
        partial void OnGiocoChanged();
        partial void OnPremioChanging(string value);
        partial void OnPremioChanged();
        partial void OnDataTorneoChanging(System.DateTime value);
        partial void OnDataTorneoChanged();
        partial void OnNPartecipantiChanging(long value);
        partial void OnNPartecipantiChanged();
        #endregion

        public Torneo()
        {
            this._Filiale  = default(EntityRef<Filiale>);
            this._Abbonamento = new EntitySet<Abbonamento>(new Action<Abbonamento>(this.attach_Abbonamento), new Action<Abbonamento>(this.detach_Abbonamento));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdFiliale in the schema.
        /// </summary>
        [Column(Storage = "_IdFiliale", CanBeNull = false, DbType = "BIGINT NOT NULL", IsPrimaryKey = true)]
        public long IdFiliale
        {
            get
            {
                return this._IdFiliale;
            }
            set
            {
                if (this._IdFiliale != value)
                {
                    if (this._Filiale.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdFilialeChanging(value);
                    this.SendPropertyChanging("IdFiliale");
                    this._IdFiliale = value;
                    this.SendPropertyChanged("IdFiliale");
                    this.OnIdFilialeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Gioco in the schema.
        /// </summary>
        [Column(Storage = "_Gioco", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Gioco
        {
            get
            {
                return this._Gioco;
            }
            set
            {
                if (this._Gioco != value)
                {
                    this.OnGiocoChanging(value);
                    this.SendPropertyChanging("Gioco");
                    this._Gioco = value;
                    this.SendPropertyChanged("Gioco");
                    this.OnGiocoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Premio in the schema.
        /// </summary>
        [Column(Storage = "_Premio", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Premio
        {
            get
            {
                return this._Premio;
            }
            set
            {
                if (this._Premio != value)
                {
                    this.OnPremioChanging(value);
                    this.SendPropertyChanging("Premio");
                    this._Premio = value;
                    this.SendPropertyChanged("Premio");
                    this.OnPremioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DataTorneo in the schema.
        /// </summary>
        [Column(Storage = "_DataTorneo", CanBeNull = false, DbType = "DATE NOT NULL", IsPrimaryKey = true)]
        public System.DateTime DataTorneo
        {
            get
            {
                return this._DataTorneo;
            }
            set
            {
                if (this._DataTorneo != value)
                {
                    this.OnDataTorneoChanging(value);
                    this.SendPropertyChanging("DataTorneo");
                    this._DataTorneo = value;
                    this.SendPropertyChanged("DataTorneo");
                    this.OnDataTorneoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NPartecipanti in the schema.
        /// </summary>
        [Column(Name = @"nPartecipanti", Storage = "_NPartecipanti", CanBeNull = false, DbType = "BIGINT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long NPartecipanti
        {
            get
            {
                return this._NPartecipanti;
            }
            set
            {
                if (this._NPartecipanti != value)
                {
                    this.OnNPartecipantiChanging(value);
                    this.SendPropertyChanging("NPartecipanti");
                    this._NPartecipanti = value;
                    this.SendPropertyChanged("NPartecipanti");
                    this.OnNPartecipantiChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Filiale in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Filiale_Torneo", Storage="_Filiale", ThisKey="IdFiliale", OtherKey="IdFiliale", IsForeignKey=true)]
        public Filiale Filiale
        {
            get
            {
                return this._Filiale.Entity;
            }
            set
            {
                Filiale previousValue = this._Filiale.Entity;
                if ((previousValue != value) || (this._Filiale.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Filiale");
                    if (previousValue != null)
                    {
                        this._Filiale.Entity = null;
                        previousValue.Torneo.Remove(this);
                    }
                    this._Filiale.Entity = value;
                    if (value != null)
                    {
                        this._IdFiliale = value.IdFiliale;
                        value.Torneo.Add(this);
                    }
                    else
                    {
                        this._IdFiliale = default(long);
                    }
                    this.SendPropertyChanged("Filiale");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Abbonamento in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Abbonamento_Torneo", Storage="_Abbonamento", ThisKey="IdFiliale,DataTorneo", OtherKey="IdAbbonamento", LinkTableName=@"gamestart_logic.accesso", LinkThisKey=@"IdFiliale,DataTorneo", LinkOtherKey=@"IdAbbonamento")]
        public EntitySet<Abbonamento> Abbonamento
        {
            get
            {
                return this._Abbonamento;
            }
            set
            {
                this._Abbonamento.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Abbonamento(Abbonamento entity)
        {
            this.SendPropertyChanging("Abbonamento");
            entity.Torneo.Add(this);
        }
    
        private void detach_Abbonamento(Abbonamento entity)
        {
            this.SendPropertyChanging("Abbonamento");
            entity.Torneo.Remove(this);
        }
    }

}
